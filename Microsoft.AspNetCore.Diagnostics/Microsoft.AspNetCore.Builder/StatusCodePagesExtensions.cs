using Microsoft.AspNetCore.Diagnostics;
using System;
using System.Threading.Tasks;

namespace Microsoft.AspNetCore.Builder
{
	public static class StatusCodePagesExtensions
	{
		/// <summary>
		/// Adds a StatusCodePages middleware with the given options that checks for responses with status codes 
		/// between 400 and 599 that do not have a body.
		/// </summary>
		/// <param name="app"></param>
		/// <param name="options"></param>
		/// <returns></returns>
		public static IApplicationBuilder UseStatusCodePages(this IApplicationBuilder app, StatusCodePagesOptions options)
		{
			throw null;
		}

		/// <summary>
		/// Adds a StatusCodePages middleware with a default response handler that checks for responses with status codes 
		/// between 400 and 599 that do not have a body.
		/// </summary>
		/// <param name="app"></param>
		/// <returns></returns>
		public static IApplicationBuilder UseStatusCodePages(this IApplicationBuilder app)
		{
			throw null;
		}

		/// <summary>
		/// Adds a StatusCodePages middleware with the specified handler that checks for responses with status codes 
		/// between 400 and 599 that do not have a body.
		/// </summary>
		/// <param name="app"></param>
		/// <param name="handler"></param>
		/// <returns></returns>
		public static IApplicationBuilder UseStatusCodePages(this IApplicationBuilder app, Func<StatusCodeContext, Task> handler)
		{
			throw null;
		}

		/// <summary>
		/// Adds a StatusCodePages middleware with the specified response body to send. This may include a '{0}' placeholder for the status code.
		/// The middleware checks for responses with status codes between 400 and 599 that do not have a body.
		/// </summary>
		/// <param name="app"></param>
		/// <param name="contentType"></param>
		/// <param name="bodyFormat"></param>
		/// <returns></returns>
		public static IApplicationBuilder UseStatusCodePages(this IApplicationBuilder app, string contentType, string bodyFormat)
		{
			throw null;
		}

		/// <summary>
		/// Adds a StatusCodePages middleware to the pipeline. Specifies that responses should be handled by redirecting 
		/// with the given location URL template. This may include a '{0}' placeholder for the status code. URLs starting 
		/// with '~' will have PathBase prepended, where any other URL will be used as is.
		/// </summary>
		/// <param name="app"></param>
		/// <param name="locationFormat"></param>
		/// <returns></returns>
		public static IApplicationBuilder UseStatusCodePagesWithRedirects(this IApplicationBuilder app, string locationFormat)
		{
			throw null;
		}

		/// <summary>
		/// Adds a StatusCodePages middleware to the pipeline with the specified alternate middleware pipeline to execute 
		/// to generate the response body.
		/// </summary>
		/// <param name="app"></param>
		/// <param name="configuration"></param>
		/// <returns></returns>
		public static IApplicationBuilder UseStatusCodePages(this IApplicationBuilder app, Action<IApplicationBuilder> configuration)
		{
			throw null;
		}

		/// <summary>
		/// Adds a StatusCodePages middleware to the pipeline. Specifies that the response body should be generated by 
		/// re-executing the request pipeline using an alternate path. This path may contain a '{0}' placeholder of the status code.
		/// </summary>
		/// <param name="app"></param>
		/// <param name="pathFormat"></param>
		/// <param name="queryFormat"></param>
		/// <returns></returns>
		public static IApplicationBuilder UseStatusCodePagesWithReExecute(this IApplicationBuilder app, string pathFormat, string queryFormat = null)
		{
			throw null;
		}
	}
}
