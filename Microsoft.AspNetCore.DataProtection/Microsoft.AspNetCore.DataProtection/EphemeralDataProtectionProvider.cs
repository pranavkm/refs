using Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption;
using Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel;
using Microsoft.AspNetCore.DataProtection.KeyManagement.Internal;
using Microsoft.Extensions.Logging;
using System;
using System.Runtime.CompilerServices;

namespace Microsoft.AspNetCore.DataProtection
{
	/// <summary>
	/// An <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtectionProvider" /> that is transient.
	/// </summary>
	/// <remarks>
	/// Payloads generated by a given <see cref="T:Microsoft.AspNetCore.DataProtection.EphemeralDataProtectionProvider" /> instance can only
	/// be deciphered by that same instance. Once the instance is lost, all ciphertexts
	/// generated by that instance are permanently undecipherable.
	/// </remarks>
	public sealed class EphemeralDataProtectionProvider : IDataProtectionProvider
	{
		private sealed class EphemeralKeyRing<T> : IKeyRing, IKeyRingProvider where T : AlgorithmConfiguration, new()
		{
			public IAuthenticatedEncryptor DefaultAuthenticatedEncryptor
			{
				[CompilerGenerated]
				get
				{
					throw null;
				}
			}

			public Guid DefaultKeyId
			{
				[CompilerGenerated]
				get
				{
					throw null;
				}
			}

			public EphemeralKeyRing(ILoggerFactory loggerFactory)
			{
				throw null;
			}

			public IAuthenticatedEncryptor GetAuthenticatedEncryptorByKeyId(Guid keyId, out bool isRevoked)
			{
				throw null;
			}

			public IKeyRing GetCurrentKeyRing()
			{
				throw null;
			}
		}

		/// <summary>
		/// Creates an ephemeral <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtectionProvider" />.
		/// </summary>
		public EphemeralDataProtectionProvider()
		{
			throw null;
		}

		/// <summary>
		/// Creates an ephemeral <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtectionProvider" /> with logging.
		/// </summary>
		/// <param name="loggerFactory">The <see cref="T:Microsoft.Extensions.Logging.ILoggerFactory" />.</param>
		public EphemeralDataProtectionProvider(ILoggerFactory loggerFactory)
		{
			throw null;
		}

		public IDataProtector CreateProtector(string purpose)
		{
			throw null;
		}
	}
}
