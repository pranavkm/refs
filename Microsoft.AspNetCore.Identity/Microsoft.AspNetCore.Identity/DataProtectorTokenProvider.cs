using Microsoft.AspNetCore.DataProtection;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;

namespace Microsoft.AspNetCore.Identity
{
	/// <summary>
	/// Provides protection and validation of identity tokens.
	/// </summary>
	/// <typeparam name="TUser">The type used to represent a user.</typeparam>
	public class DataProtectorTokenProvider<TUser> : IUserTwoFactorTokenProvider<TUser> where TUser : class
	{
		/// <summary>
		/// Gets the <see cref="T:Microsoft.AspNetCore.Identity.DataProtectionTokenProviderOptions" /> for this instance.
		/// </summary>
		/// <value>
		/// The <see cref="T:Microsoft.AspNetCore.Identity.DataProtectionTokenProviderOptions" /> for this instance.
		/// </value>
		protected DataProtectionTokenProviderOptions Options
		{
			[CompilerGenerated]
			get
			{
				throw null;
			}
		}

		/// <summary>
		/// Gets the <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtector" /> for this instance.
		/// </summary>
		/// <value>
		/// The <see cref="T:Microsoft.AspNetCore.DataProtection.IDataProtector" /> for this instance.
		/// </value>
		protected IDataProtector Protector
		{
			[CompilerGenerated]
			get
			{
				throw null;
			}
		}

		/// <summary>
		/// Gets the name of this instance.
		/// </summary>
		/// <value>
		/// The name of this instance.
		/// </value>
		public string Name
		{
			get
			{
				throw null;
			}
		}

		/// <summary>
		/// Gets the <see cref="T:Microsoft.Extensions.Logging.ILogger" /> used to log messages from the provider.
		/// </summary>
		/// <value>
		/// The <see cref="T:Microsoft.Extensions.Logging.ILogger" /> used to log messages from the provider.
		/// </value>
		public ILogger<DataProtectorTokenProvider<TUser>> Logger
		{
			[CompilerGenerated]
			get
			{
				throw null;
			}
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="T:Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1" /> class.
		/// </summary>
		/// <param name="dataProtectionProvider">The system data protection provider.</param>
		/// <param name="options">The configured <see cref="T:Microsoft.AspNetCore.Identity.DataProtectionTokenProviderOptions" />.</param>
		/// <param name="logger">The logger used to log messages, warnings and errors.</param>
		public DataProtectorTokenProvider(IDataProtectionProvider dataProtectionProvider, IOptions<DataProtectionTokenProviderOptions> options, ILogger<DataProtectorTokenProvider<TUser>> logger)
		{
			throw null;
		}

		/// <summary>
		/// Generates a protected token for the specified <paramref name="user" /> as an asynchronous operation.
		/// </summary>
		/// <param name="purpose">The purpose the token will be used for.</param>
		/// <param name="manager">The <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1" /> to retrieve user properties from.</param>
		/// <param name="user">The <typeparamref name="TUser" /> the token will be generated from.</param>
		/// <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the generated token.</returns>
		[AsyncStateMachine(typeof(DataProtectorTokenProvider<>._003CGenerateAsync_003Ed__14))]
		[DebuggerStepThrough]
		public virtual Task<string> GenerateAsync(string purpose, UserManager<TUser> manager, TUser user)
		{
			throw null;
		}

		/// <summary>
		/// Validates the protected <paramref name="token" /> for the specified <paramref name="user" /> and <paramref name="purpose" /> as an asynchronous operation.
		/// </summary>
		/// <param name="purpose">The purpose the token was be used for.</param>
		/// <param name="token">The token to validate.</param>
		/// <param name="manager">The <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1" /> to retrieve user properties from.</param>
		/// <param name="user">The <typeparamref name="TUser" /> the token was generated for.</param>
		/// <returns>
		/// A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the result of the asynchronous validation,
		/// containing true if the token is valid, otherwise false.
		/// </returns>
		[AsyncStateMachine(typeof(DataProtectorTokenProvider<>._003CValidateAsync_003Ed__15))]
		[DebuggerStepThrough]
		public virtual Task<bool> ValidateAsync(string purpose, string token, UserManager<TUser> manager, TUser user)
		{
			throw null;
		}

		/// <summary>
		/// Returns a <see cref="T:System.Boolean" /> indicating whether a token generated by this instance
		/// can be used as a Two Factor Authentication token as an asynchronous operation.
		/// </summary>
		/// <param name="manager">The <see cref="T:Microsoft.AspNetCore.Identity.UserManager`1" /> to retrieve user properties from.</param>
		/// <param name="user">The <typeparamref name="TUser" /> the token was generated for.</param>
		/// <returns>
		/// A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the result of the asynchronous query,
		/// containing true if a token generated by this instance can be used as a Two Factor Authentication token, otherwise false.
		/// </returns>
		/// <remarks>This method will always return false for instances of <see cref="T:Microsoft.AspNetCore.Identity.DataProtectorTokenProvider`1" />.</remarks>
		public virtual Task<bool> CanGenerateTwoFactorTokenAsync(UserManager<TUser> manager, TUser user)
		{
			throw null;
		}
	}
}
